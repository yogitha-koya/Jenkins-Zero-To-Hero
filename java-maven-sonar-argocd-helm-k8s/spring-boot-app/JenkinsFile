pipeline {
  agent {
    docker {
      image 'yogithak/maven-java17-docker:v2'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }
  stages {
    stage('Checkout') {
      steps {
        // You must clone the GitHub repo to ensure git operations work
        checkout scm
      }
    }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://35.93.25.180:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=$SONAR_URL
          '''
        }
      }
    }

    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "yogithak/ultimate-cicd:${BUILD_NUMBER}"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
          sh '''
            cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
            docker build -t $DOCKER_IMAGE .

            # Install Trivy (if not already in your custom image)
            if ! command -v trivy &> /dev/null; then
              echo "Installing Trivy..."
              apk --no-cache add curl
              curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
            fi

            # Scan the image using Trivy
            echo "Running Trivy scan on $DOCKER_IMAGE"
            trivy image --exit-code 1 --severity CRITICAL,HIGH --no-progress $DOCKER_IMAGE

            # Check scan result and exit if vulnerabilities found
            if [ $? -ne 0 ]; then
              echo "Trivy scan failed due to vulnerabilities in image: $DOCKER_IMAGE"
              exit 1
            fi
          '''
          def dockerImage = docker.image("${DOCKER_IMAGE}")
          docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
            dockerImage.push()
          }
        }
      }
    }

    stage('Update Deployment File') {
      environment {
        GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
        GIT_USER_NAME = "yogitha-koya"
      }
      steps {
        withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
          sh '''
            # Clean up if repo already exists 
            rm -rf Jenkins-Zero-To-Hero
            
            # Clone the repository with credentials
            git clone https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}.git
            cd ${GIT_REPO_NAME}

            # Update the image tag in deployment.yml
            sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

            # Set Git identity
            git config user.name "yogitha koya"
            git config user.email "yogitha.koya@gmail.com"

            # Commit and push only if there are changes
            if git diff --quiet; then
              echo "No changes to commit"
            else
              git add java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml
              git commit -m "Update deployment image to version ${BUILD_NUMBER}"
              git push origin main
            fi
          '''
        }
      }
    }
  }
}
